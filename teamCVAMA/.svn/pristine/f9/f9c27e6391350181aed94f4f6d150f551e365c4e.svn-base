<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<title>마스크</title>
<style>
.infoScroll{
	position:absolute;
	width:500px;
	height:1000px;
	z-index:2;
	background-color:white;
	display:none
}
.searchBtn{
	position:absolute;
	top:60px;
	right:10px;
	z-index:1
}
#map{
	width:100%;
	height:1000px;
	z-index:0
}
img:hover{
	transform: scale(1.2)
}
</style>
<script type="text/javascript"
src="//dapi.kakao.com/v2/maps/sdk.js?appkey=81764986defd7e840545ca7d0b5372a4">
</script>
</head>
<body>
<div class="infoScroll">
	<div class="infoInner infoInner-code">코드</div>
	<div class="infoInner infoInner-title">이름</div>
	<div class="infoInner infoInner-remain">상태</div>
	<div class="infoInner infoInner-addr">주소주소주소주소주소주소주소주소주소주소주소주소주소주소</div>
	<div class="infoInner infoInner-created">7293579</div>
	<div class="infoInner infoInner-stock">4313256</div>
	<div class="infoInner infoInner-list">데이터대기중...</div>
</div>
<input class="btn btn-default searchBtn" type="button" onclick="getInfo();" value="검색"/>
<div id="map"></div>
<!-- <p><em>지도 중심좌표가 변경되면 지도 정보가 표출됩니다</em></p>
<p id="result"></p> -->
<script>
var mapContainer = document.getElementById('map'), // 지도를 표시할 div
    mapOption = { 
        center: new kakao.maps.LatLng(37.50092255804644, 126.8847970328552), // 지도의 중심좌표
        level: 3 // 지도의 확대 레벨
    };
var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다

var latlng = map.getCenter();

var date = new Date();

var year = date.getFullYear();

var month = date.getMonth()+1;

if(month<10) month = '0'+month;

var day = date.getDate();

var stores = null;

var storeMarkers = [];

var selectedMarker = null;

// 지도가 이동, 확대, 축소로 인해 중심좌표가 변경되면 마지막 파라미터로 넘어온 함수를 호출하도록 이벤트를 등록합니다
kakao.maps.event.addListener(map, 'center_changed', function() {

    // 지도의  레벨을 얻어옵니다
    var level = map.getLevel();

    // 지도의 중심좌표를 얻어옵니다 
    latlng = map.getCenter(); 

//    var message = '<p>지도 레벨은 ' + level + ' 이고</p>';
//    message += '<p>중심 좌표는 위도 ' + latlng.getLat() + ', 경도 ' + latlng.getLng() + '입니다</p>';

//    var resultDiv = document.getElementById('result');
    
//    resultDiv.innerHTML = message;
});

function getInfo(){
	setMarkers(null);
	stores = null;
	storeMarkers = [];
	//커피숍 마커들의 지도 표시 여부를 설정하는 함수입니다
	function setMarkers(map) {     
		storeMarkers.forEach((value)=>{
			value.setMap(map);
		}); 
	}
	url = 'https://8oi9s0nnth.apigw.ntruss.com/corona19-masks/v1/storesByGeo/json?lat='
	  +latlng.getLat()+'&lng='+latlng.getLng();
	$.getJSON(url, function(data) {
		$("#stores").html('');
		stores = data.stores;
		stores.forEach((value)=>{
//			$("#stores").append("<li>" + value.addr + "</li>\n");
		
	    var imageSize = new kakao.maps.Size(20, 20),
	    imageOptions = {}
	    
	    position = new kakao.maps.LatLng(value.lat, value.lng);
			// 마커이미지와 마커를 생성합니다
			if(value.remain_stat=='plenty') markerImageSrc = greenMarkerImageSrc;
			else if(value.remain_stat=='some') markerImageSrc = orangeMarkerImageSrc;
			else if(value.remain_stat=='few') markerImageSrc = redMarkerImageSrc;
			else markerImageSrc = greyMarkerImageSrc;
			
			var markerImage = createMarkerImage(
				markerImageSrc, imageSize, imageOptions),    
				marker = createMarker(position, markerImage);
			marker.store = value;
			
			// 생성된 마커를 커피숍 마커 배열에 추가합니다
			storeMarkers.push(marker);

			//마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다
			value.iwContent = '<div style="padding:5px;">'+value.name+'</div>'

			// 인포윈도우를 생성합니다
			value.infowindow = new kakao.maps.InfoWindow({
				content : value.iwContent
//				removable : iwRemoveable
			});
			//마커에 클릭이벤트를 등록합니다
			kakao.maps.event.addListener(marker, 'click', function(){
				$(".infoInner-list").html("<div>데이터 대기중...</div>");
			  if (selectedMarker!=null) {

			  	if(selectedMarker.store.code==marker.store.code){
			    	selecterMarker = null;
			    	$(".infoScroll").toggle('slide');
			  	}else{
			      // 클릭된 마커를 현재 클릭된 마커 객체로 설정합니다
			      selectedMarker = marker;
				    
				    showList(marker);
				    
			    }
			  }else{
			    // 클릭된 마커를 현재 클릭된 마커 객체로 설정합니다
			    selectedMarker = marker;

			    showList(marker);
			    
					$(".infoScroll").toggle('slide');
					// 마커 위에 인포윈도우를 표시합니다
			  }
			});
			kakao.maps.event.addListener(marker, 'mouseover', makeOverListener(map, marker, value.infowindow));
	    kakao.maps.event.addListener(marker, 'mouseout', makeOutListener(value.infowindow));
			
		});
		setMarkers(map);	
	});
}

// getList를 저장하는 프로그램 작성 -> 필요한 데이터 param(no, page), callback-처리되는 함수, error-오류가 났을때 객체
function getList(marker, callback, error){
	var code = marker.store.code;
	var yesterday = ''+ year + ''+  month +''+ (day-2);
	
	// $.getJSON
	$.getJSON(
			// 데이터 요청 URI
			"/mask/maskMap/" + yesterday + "/" + code + ".json",
			// 데이터 가져오기를 성공하면 처리되는 함수. data : 서버에서 넘어오는 데이터
			function(data){
				// 데이터를 가져오기를 성공하면 실행되는 함수를 밖에서 선언해서 넣어주는 경우 처리
				if(callback){
					callback(data);
				}
			}
	// 데이터 가져오는 것을 실패했을 때의 처리
	).fail(function(xhr, status, err){
		if(err){
			err();
		}
	});
}

function showList(marker){
  getList(marker,function(list){
		var str = "";

    $(".infoInner-code").html(marker.store.code);
    $(".infoInner-title").html(marker.store.name);
    $(".infoInner-remain").html(marker.store.remain_stat);
    $(".infoInner-addr").html(marker.store.addr);
    $(".infoInner-created").html(marker.store.created_at);
    $(".infoInner-stock").html(marker.store.stock_at);
		
		if(list == null || list.length ==0){
			$(".infoInner-list").html("<div>판매 정보가 존재하지 않습니다.</div>");
			return;
		}
		str += "<div>"+list[0].code+"</div>";
		str += "<div>"+list[0].stock_at+"</div>";
		for(var i = 0; i < list.length; i++){
			var dto = list[i];
			str += "<div>"+dto.remain_stat+"</div>";
			str += "<div>"+dto.created_at+"</div>";
		}
		$(".infoInner-list").html(str);
    
  });
}

// 인포윈도우를 표시하는 클로저를 만드는 함수입니다 
function makeOverListener(map, marker, infowindow) {
  return function() {
    infowindow.open(map, marker);
  };
}

// 인포윈도우를 닫는 클로저를 만드는 함수입니다 
function makeOutListener(infowindow) {
  return function() {
    infowindow.close();
  };
}

var greenMarkerImageSrc = '../upload/icon/green.jpg';  // 마커이미지의 주소입니다. 스프라이트 이미지 입니다
var orangeMarkerImageSrc = '../upload/icon/orange.jpg';
var redMarkerImageSrc = '../upload/icon/red.jpg';
var greyMarkerImageSrc = '../upload/icon/grey.jpg';


// 마커이미지의 주소와, 크기, 옵션으로 마커 이미지를 생성하여 리턴하는 함수입니다
function createMarkerImage(src, size, options) {
  var markerImage = new kakao.maps.MarkerImage(src, size, options);
  return markerImage;            
}

// 좌표와 마커이미지를 받아 마커를 생성하여 리턴하는 함수입니다
function createMarker(position, image) {
  var marker = new kakao.maps.Marker({
    position: position,
    image: image,
  	clickable: true
  });
    
  return marker;  
}
</script>
</body>
</html>